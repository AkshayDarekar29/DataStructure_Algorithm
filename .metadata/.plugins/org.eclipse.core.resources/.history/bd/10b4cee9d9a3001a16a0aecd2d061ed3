package general;

import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Set;
import java.util.stream.Collectors;

public class Test {
	public static void main(String[] args) {
		Test obj = new Test();
		String beginWord = "hit";
		String endWord = "cog";
		List<String> wordList = Arrays.asList(new String[]{"bit","dot","bot","bog","lot","cog"});
		int n = obj.ladderLength(beginWord, endWord, wordList);
		System.out.println(n);
	}
public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
        HashMap<String, Integer> map = new HashMap<>();
        Queue<String> q = new LinkedList<>();
        q.offer(beginWord);
        Set<String> wordSet = wordList.stream().collect(Collectors.toSet());
        if(!wordSet.contains(endWord))
            return 0;
        map.put(beginWord, 0);
        while(!q.isEmpty()){
            int len = q.size();
            String s = q.poll();
            for(int k=0; k < len; k++){
                for(int i = 0 ; i < s.length() ; i++) {
                    for(char c = 'a' ; c <= 'z' ; c++) {
                        String transformed = s.substring(0, i) + (char) c + s.substring(i + 1, s.length());
                        if(wordSet.contains(transformed)){
                            if(!map.containsKey(transformed)) {
                                q.add(transformed);
                                map.put(transformed, map.get(s)+1);
                            }
                        }                      
                    }
                }
            }
        }
        if(map.containsKey(endWord)){
            return map.get(endWord) + 1;
        }   
        return 0;
    }
}
