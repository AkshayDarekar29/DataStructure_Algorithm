package graph.RottingOranges;

import java.util.LinkedList;
import java.util.Queue;

public class RottingOranges {
	
	/* Approach 1 : BFS
	 * Time Complexity : O(n2)
	 * Space Complexity : O(n)
	 */
	public int orangesRotting(int[][] grid) {
        int m = grid.length;
        if(m == 0){
            return 0;
        }
        int n = grid[0].length;
        int [] xList = {-1,0,1,0};
        int [] yList = {0,1,0,-1};
        int count_fresh = 0;
        Queue<int []> q = new LinkedList<>();
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 2){
                    q.offer(new int[]{i,j});
                }else if(grid[i][j] == 1){
                    count_fresh++;
                }
            }
        }
        if(count_fresh == 0) return 0;
        int count = 0;
        while(!q.isEmpty()){
            count++;
            int len = q.size();
            for(int i=0; i < len; i++){
                int [] temp = q.poll();
                int x = temp[0];
                int y = temp[1];
                for(int j=0; j < 4; j++){
                    int newX = x + xList[j];
                    int newY = y + yList[j];
                    if(isSafe(newX, newY, m, n) && grid[newX][newY] == 1){
                        grid[newX][newY] = 2;
                        q.offer(new int[]{newX, newY});
                        count_fresh--;
                    }
                }
            }
        }
        return count_fresh == 0 ? count-1 : -1;
    }
    private boolean isSafe(int nextX, int nextY, int m, int n) {
		if(nextX >= 0 && nextX < m && nextY >= 0 && nextY < n){
			return true;
		}
		return false;
	}
}
