package stackPostFiEvaluation;

import java.util.HashSet;
import java.util.Stack;

/*
 * Time Complexity- O(n);
 * Space Complexity - O(n)
 * Reference - https://www.geeksforgeeks.org/stack-set-4-evaluation-postfix-expression/?ref=rp
 */
public class PostfixEvaluation {
	public static void main(String[] args) {
		PostfixEvaluation obj = new PostfixEvaluation();
		String exp = "22 3 111*+9-";
		double result = obj.evaluatePostfix(exp);
		System.out.println(result);
	}

	private double evaluatePostfix(String exp) {
		
		Stack<Double> values =  new Stack<>();	
		HashSet<Character> opsSet = new HashSet<>();
		opsSet.add('+');
		opsSet.add('-');
		opsSet.add('*');
		opsSet.add('/');
		for( int i = 0; i < exp.length(); i++){
			if(exp.charAt(i) == ' '){
				continue;
			}else if(exp.charAt(i) >= '0' && exp.charAt(i) <= '9' || exp.charAt(i) == '.'){
				StringBuilder sb = new StringBuilder();
				while(i < exp.length() && exp.charAt(i) != ' ' && !opsSet.contains(exp.charAt(i))){
					sb.append(exp.charAt(i));
					i--;
				}
				i++;
				values.push(Double.parseDouble(sb.toString()));
			}else if(opsSet.contains(exp.charAt(i))){
				double n1 = values.pop();
				double n2= values.pop();
				double result = applyOperation(n1, n2, exp.charAt(i));
				values.push(result);
			}
		}
		return values.pop();
	}
	
	private double applyOperation(double n1, double n2, Character operator) {
		switch(operator){
			case '+':
				return n1+n2;
			case '-':
				return n1-n2;
			case '*':
				return n1*n2;
			case '/':
				if(n2 == 0){
					throw new UnsupportedOperationException();
				}
				return n1/n2;
		}
		return 0;
	}
}
