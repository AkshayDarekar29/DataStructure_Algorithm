package heap.FindMedianOfInputStream;

import java.util.Comparator;
import java.util.PriorityQueue;

import linkedList.ListNode;

public class FindMedianOfInputStream {
	
	
	/* Approach : MinHeap
	 * Time Complexity : nLog(n)
	 * Space Complexity : O(n)
	 */
	public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<Integer> q = new PriorityQueue<>();
        int len = lists.length;
        for(int i=0; i < len; i++){
            ListNode temp = lists[i];
            while(temp != null){
                q.offer(temp.val);
                temp = temp.next;
            }
        }
        ListNode res = new ListNode(0);
        ListNode temp = res;
        while(!q.isEmpty()){
            temp.next = new ListNode(q.poll());
            temp = temp.next;
        }
        return res.next;
    }
	
	/* Approach : MinHeap
	 * Time Complexity : nLog(k)
	 * Space Complexity : O(n)
	 */
	public ListNode mergeKLists_2(ListNode [] lists) {
        if (lists==null || lists.length ==0) return null;
        
        PriorityQueue<ListNode> queue= new PriorityQueue<ListNode>(lists.length,new Comparator<ListNode>(){
            @Override
            public int compare(ListNode o1,ListNode o2){
                if (o1.val<o2.val)
                    return -1;
                else if (o1.val==o2.val)
                    return 0;
                else 
                    return 1;
            }
        });
        
        ListNode dummy = new ListNode(0);
        ListNode tail=dummy;
        
        for (ListNode node:lists)
            if (node!=null)
                queue.add(node);
            
        while (!queue.isEmpty()){
            tail.next=queue.poll();
            tail=tail.next;
            
            if (tail.next!=null)
                queue.add(tail.next);
        }
        return dummy.next;
    }
	
}
