package heap.SortNearlySortedArray;

import java.util.Arrays;
import java.util.PriorityQueue;

public class SortNearlySortedArray {
	
	public static void main(String[] args) {
		SortNearlySortedArray obj = new SortNearlySortedArray();
		int k = 3; 
        int nums[] = { 2, 5, 4, 3, 6, 12, 56, 8, 10, 14, 89, 75 };
        System.out.println("Before Sorting - " + Arrays.toString(nums));
        obj.sort(nums, k);
        System.out.println("After Sorting - " + Arrays.toString(nums));
	}
	
	/*Approach 1 : MinHeap
	 * Time Complexity: 
	 * Space Complexity:
	*/
	public void sort(int[] nums, int k){
		PriorityQueue<Integer> q = new PriorityQueue<>(k);
		for(int i=0; i< nums.length; i++){
			if(q.size() == k){
				nums[i-k] = q.poll();
			}
			q.offer(nums[i]);
		}
		int i = nums.length-k;
		while(!q.isEmpty()){
			nums[i] = q.poll();
			i++;
		}
	}
}
