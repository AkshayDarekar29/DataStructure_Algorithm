package stack.InfixEvaluation;

import java.util.Stack;

public class InfixEvaluation {
	public static void main(String[] args) {
		InfixEvaluation obj = new InfixEvaluation();
		String exp = "100*2+4-4/8+20-4";
		int result = obj.evaluateInfix(exp);
	}

	private int evaluateInfix(String exp) {
		
		char[] tokens = exp.toCharArray();
		Stack<Integer> values =  new Stack<>();	
		Stack<Character> Ops =  new Stack<>();
		
		for (int i = 0; i < tokens.length; i++) {
			
			if(tokens[i] == ' '){
				continue;
			}
			
			if(tokens[i] >= '0' && tokens[i] <= '9'){
				StringBuilder sb = new StringBuilder();	
				while(i<tokens.length && tokens[i] >= '0' && tokens[i] <= '9'){
					sb.append(tokens[i++]);
				}
				values.push(Integer.parseInt(sb.toString()));
			}else if(tokens[i] == '('){
				Ops.push(tokens[i]);
			}else if(tokens[i] == ')'){
				while(!Ops.empty() && Ops.peek() != '('){
					int result = applyOperation();
					values.push(result);
				}
			}
		}
		
		return 0;
	}
}
