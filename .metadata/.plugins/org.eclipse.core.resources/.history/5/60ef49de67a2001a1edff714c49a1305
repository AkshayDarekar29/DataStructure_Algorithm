package graph.NumberOfIslands;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class NumberOfIslands {
	
	/* Approach 1 : BFS
	 * Time Complexity : O(E+V), where E is number of edges
	 * Space Complexity : O(V)
	 */
	int m;
    int n;
    public int numIslands(char[][] grid) {
        m = grid.length;
        if(m == 0){
            return 0;
        }
        n = grid[0].length;
        int count = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == '1'){
                    marking(grid, i, j);
                    count++;
                }
            }
        }
        return count;
    }
    public void marking(char[][] grid, int i, int j){
        if(i < 0 || i >= m || j < 0 || j >= n || grid[i][j] != '1'){
            return;
        }
        grid[i][j] = '0';
        marking(grid, i, j-1);
        marking(grid, i-1, j);
        marking(grid, i, j+1);
        marking(grid, i+1, j);
    }
}
