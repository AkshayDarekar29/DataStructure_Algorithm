package dynamicProgramming.CuttingARod;

import java.util.Arrays;

public class CuttingARod {
	public static void main(String[] args) {
		CuttingARod obj = new CuttingARod();
		int len = 8;
		int[] price = {10,5,8,9,30,17,17,40};
		int n = obj.cutRod(price, len);
		
	}

	/*Approach 1 : Brute-Force
	 * Time Complexity: 
	 * Space Complexity: 
	*/
	/*static int  maxCost = 0;
	public void maxCost(int len, int[] price, int cost) {
		if(cost > maxCost){
			maxCost = cost;
		}
		for (int i = 0; i < len; i++) {
			maxCost(len-(i+1), price, cost+price[i]);
		}
	}*/
	
	static int cutRod(int price[], int n) 
    { 
        if (n <= 0) 
            return 0; 
        int max_val = Integer.MIN_VALUE; 
  
        // Recursively cut the rod in different pieces and 
        // compare different configurations 
        for (int i = 0; i<n; i++) 
            max_val = Math.max(max_val, 
                              price[i] + cutRod(price, n-i-1)); 
  
        return max_val; 
    } 

}
