package binarySearch.SearchInMatrix;

public class SearchInRotatedSortedArray {
	public static void main(String[] args) {
		SearchInMatrix obj = new SearchInMatrix();
		int arr [] = {3,4,5,6,7,8,9,0,1,2};
		int target = 12;
		int x = obj.search(arr, target);
		System.out.println("Element "+ target + " fount at position "+ x);
	}
	
	/*
	 * Approach 1 : Finding pivot and then Finding target by usual Binary Search accounting Rotation 
	 * Time Complexity: O(log(n)) 
	 * Space Complexity: O(1)
	 */
	int search(int A[], int target) {
        int n = A.length;
        int lo=0,hi=n-1;
        // find the index of the smallest value using binary search.
        // Loop will terminate since mid < hi, and lo or hi will shrink by at least 1.
        // Proof by contradiction that mid < hi: if mid==hi, then lo==hi and loop would have been terminated.
        while(lo<hi){
            int mid=(lo+hi)/2;
            if(A[mid]>A[hi]) lo=mid+1;
            else hi=mid;
        }
        // lo==hi is the index of the smallest value and also the number of places rotated.
        int rot=lo;
        lo=0;hi=n-1;
        // The usual binary search and accounting for rotation.
        while(lo<=hi){
            int mid=(lo+hi)/2;
            int realmid=(mid+rot)%n;
            if(A[realmid]==target)return realmid;
            if(A[realmid]<target)lo=mid+1;
            else hi=mid-1;
        }
        return -1;
    }
	/*
	 * Approach 2 : Finding Pivot and then Divide array in two halves and search in each array using Binary search
	 * Time Complexity: O(log(n)) 
	 * Space Complexity: O(1)
	 */
	public int search_2(int[] nums, int target) {
        int start = 0;
        int end = nums.length-1;
        int pivot;
        if(nums.length == 0){
            return -1;
        }else if(nums[start] < nums[end]){
			pivot = -1;
		}else{
            pivot = findPivot(nums, start, end);
        }
        
        int position;
		if(pivot == -1){
			position = binarySearch(nums, 0, nums.length-1,target);
		}else if(target >= nums[0] && target <= nums[pivot] ){
			position = binarySearch(nums, 0, pivot, target);
		}else{
			position = binarySearch(nums, pivot+1, nums.length-1, target);
		}
        return position;
    }
    
    private int findPivot(int[] arr, int start, int end) {
		int mid = (start+end)/2;
		if(start == end){
			return mid;
		}		
        if(arr[start] < arr[mid]){
            return findPivot(arr, mid, end);
        }else{
            return findPivot(arr, start, mid);
        }	
	}
    public int binarySearch(int [] arr, int beg, int end, int item){
        int mid;
		if(end >= beg){
			mid = (beg + end)/2;
			if(item == arr[mid]){
				return mid;
			}else if(item > arr[mid]){
				return binarySearch(arr, mid+1, end, item);
			}else {
				return binarySearch(arr, beg , mid-1, item);
			}
		}	
		return -1;
    }
	
}
