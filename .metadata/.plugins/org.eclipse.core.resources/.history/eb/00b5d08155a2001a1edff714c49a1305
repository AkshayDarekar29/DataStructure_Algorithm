package graph.IsGraphBipartite;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;

public class IsGraphBipartite {
	
	/* Approach 1 : BFS
	 * Time Complexity : O(max(N, E)), where E is number of edges
	 * Space Complexity : O(N)
	 */
	public boolean isBipartite(int[][] graph) {
        int N = graph.length;
        boolean[] available = new boolean[2];
        Arrays.fill(available, true);
        int[] res = new int[N];
        boolean[] visited = new boolean[N];
        Arrays.fill(res, -1);
        Queue<Integer> q = new LinkedList<>();
        for(int i= 0; i < N; i++){
            if(visited[i] == false){
                q.offer(i);
                visited[i] = true;
                while(!q.isEmpty()){
                    int curr = q.poll();
                    for(int neighbour : graph[curr]){
                        if(res[neighbour] != -1){
                            available[res[neighbour]] = false;
                        }else if(!visited[neighbour]){
                            visited[neighbour] = true;
                            q.offer(neighbour);
                        }
                    }
                    int color;
                    for( color=0; color <2; color++){
                        if(available[color]){
                            break;
                        }
                        if(color == 1){
                            return false;
                        }
                    }
                    res[curr] = color;
                    Arrays.fill(available, true);
                }
            }
        }
        return true;
    }
}
