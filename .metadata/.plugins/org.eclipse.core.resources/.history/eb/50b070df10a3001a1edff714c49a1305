package general;
public class Test {
    public int knight(int A, int B, int C, int D, int E, int F) {
        if(C == E && D == F){
            return 0;
        }
        Queue<Integer> q = new LinkedList<>();
        boolean [][] visited = new boolean[A+1][B+1];
        q.offer(C*B + D);
        visited[C][D] = true;
        int [] xList = {2,1,-1,-2,-2,-1,1,2};
        int [] yList = {1,2,2,1,-1,-2,-2,-1};
        int count = 0;
        while(!q.isEmpty()){
            count++;
            int len = q.size();
            for(int n=0; n < len; n++){
                int pos = q.poll();
                C = pos/A;
                D = pos%B;
                for(int i=0; i<8; i++){
                    int newX = C + xList[i];
                    int newY = D + yList[i];
                    if(newX == E && newY == F){
                        return count;
                    }else if(isSafe(newX, newY, A, B, visited)){
                        q.offer(newX*B + newY);
                    }
                }
            }
        }
        for(boolean[] b : visited){
            System.out.println(Arrays.toString(b));
        }
        return -1;
    }
    
    private boolean isSafe(int nextX, int nextY, int A, int B, boolean[][] visited) {
		if(nextX >= 1 && nextX <= A && nextY >= 1 && nextY <= B && !visited[nextX][nextY]){
		    visited[nextX][nextY] = true;
			return true;
		}
		return false;
	}
}
