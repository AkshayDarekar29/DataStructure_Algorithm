package backtracking.RatInMaze;

import java.util.Arrays;

public class RatInMaze {
	
	public static void main(String args[]) 
    { 
		RatInMaze obj = new RatInMaze();
		int [][] matrix = new int[6][6];
		int xStart = 0;
		int yStart = 0;
		boolean f = obj.solve(matrix, xStart, yStart);
		if(f){
			for (int i = 0; i < matrix.length; i++) {
				System.out.println(Arrays.toString(matrix[i]));
			}
		}else{
			System.out.println("Solution does not exist");
		}
    }

	/*
	 * Approach 1 : Backtracking
	 * Time Complexity: O(8^(m*n)) 
	 * Space Complexity: O(m*n)
	 */
	private boolean solve(int[][] matrix, int xStart, int yStart){
		
		return false;
	}
	private boolean KniteTour(int[][] matrix, int x, int y, int move, int[] xMove, int[] yMove) {
	
	}

	private boolean isSafe(int nextX, int nextY, int[][] matrix) {
		
		return false;
	}	
}
