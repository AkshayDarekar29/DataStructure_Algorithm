package greedy.FractionalKnapsack;

import java.util.Arrays;

public class MaximumProductOf3NumbersInArray {
	
	/* Approach : Finding Maximum 3 and minimum two elements
	 * Time Complexity : O(n)
	 * Space Complexity : O(1)
	 */
	public int maximumProduct(int[] nums) {
        if (nums == null ||nums.length == 0) {
            return 0;
        }
        
        int max1 = Integer.MIN_VALUE;
        int max2 = Integer.MIN_VALUE;
        int max3 = Integer.MIN_VALUE;
        int min1 = Integer.MAX_VALUE;
        int min2 = Integer.MIN_VALUE;
        
        for (int num : nums) {
            if (num > max1) {
                max3 = max2;
                max2 = max1;
                max1 = num;
            } else if (num > max2) {
                max3 = max2;
                max2 = num;
            } else if (num > max3) {
                max3 = num;
            }
            
            if (num < min1) {
                min2 = min1;
                min1 = num;
            } else if (num < min2) {
                min2 = num;
            }
        }
        
        return Math.max(max1 * max2 * max3, max1 * min1 * min2);   
    }
	
	/* Approach : Sorting
	 * Time Complexity : O(nLog(n))
	 * Space Complexity : O(1)
	 */
	public int maximumProduct_2(int[] nums) {
        Arrays.sort(nums);
        return Math.max(nums[nums.length-1]*nums[nums.length-2]*nums[nums.length-3], nums[nums.length-1]*nums[0]*nums[1]);
    }
}
