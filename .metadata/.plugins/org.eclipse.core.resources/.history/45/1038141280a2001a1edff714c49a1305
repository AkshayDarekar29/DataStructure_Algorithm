package graph.FriendCircles;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class FriendCircles {
	
	/* Approach 1 : BFS
	 * Time Complexity : O(n2)
	 * Space Complexity : O(n)
	 */
	public int findCircleNum(int[][] M) {
        Queue<Integer> q = new LinkedList<>();
        boolean[] visited = new boolean[M.length];
        int count = 0;
        for(int i=0; i<M.length; i++){
            if(!visited[i]){
                q.offer(i);
                visited[i] = true;
                count++;
            }
            while(!q.isEmpty()){
                int curr = q.poll();
                for(int j=0; j<M.length; j++){
                    if(M[curr][j] == 1 && !visited[j]){
                        visited[j] = true;
                        q.offer(j);
                    }
                }
            }
        }
        return count;
    }
}
