 package tree.MaxDepthOfTree;

import java.util.LinkedList;
import java.util.Queue;

import tree.TreeNode;

public class MaxDepthOfTree {
	
	/*Approach 1 : Recursion
	 * Time Complexity: O(n)
	 * Space Complexity: O(n) , where is n is number of nodes
	*/
	public int maxDepth_recursion(TreeNode root) {
        if(root == null){
            return 0;
        }
        return 1 + Math.max(maxDepth_recursion(root.left), maxDepth_recursion(root.right));
    }
	
	/*Approach 2 : Iteration - using BFS
	 * Time Complexity: O(n)
	 * Space Complexity: O(n) , where is n is number of nodes
	*/
	public int maxDepth_iteration(TreeNode root) {
        if(root == null){
            return 0;
        }
        int maxDepth = 0;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            int len = q.size();
            for(int i=0; i< len; i++){
                TreeNode node = q.poll();
                if(node.left != null){
                    q.offer(node.left);
                }
                if(node.right != null){
                    q.offer(node.right);
                }
            }
            maxDepth++;
        } 
        return maxDepth;
    }
	
	/*Approach 3 : DFS
	 * Time Complexity: O(n)
	 * Space Complexity: O(n) , where is n is number of nodes
	*/
	int maxDepth = 0;
    public int maxDepth(TreeNode root) {
        dfs(root, 1);
        return maxDepth;
    }
    
    public void dfs(TreeNode root, int y){
        if(root == null){
            return;
        }
        if(maxDepth < y){
            maxDepth = y;
        }
        dfs(root.left, y+1);
        dfs(root.right, y+1);  
    }
}
