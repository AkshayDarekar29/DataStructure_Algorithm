 package dynamicProgramming.CoinChange_2;

public class CoinChange_2 {
	
	/*Approach 1 : Bottom-Up
	 * Time Complexity: O(n*k)
	 * Space Complexity: O(n*k), where n is amount, and k is size of array of coins
	*/
	public int change(int amount, int[] coins) {
        if(amount == 0 ){
            return 1;
        }else if(coins.length == 0){
            return 0;
        }
        int[][] dp = new int[coins.length][amount+1];
        //base 
        for(int i = 0; i <= amount; i++){
            if(i%coins[0] == 0){
                dp[0][i] = 1;
            }
        }
        for(int i = 1; i < coins.length; i++){
            for(int j = 0; j <= amount; j++){
                if(j-coins[i] >= 0){
                    dp[i][j] = dp[i-1][j] + dp[i][j-coins[i]];
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[coins.length-1][amount];
    }

    /*Approach 2 : Top-Down
	 * Time Complexity: O(n)
	 * Space Complexity: O(n)
	*/
	
}
