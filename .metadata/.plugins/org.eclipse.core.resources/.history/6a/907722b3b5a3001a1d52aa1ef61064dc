package graph.Matrix_01;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;

public class Matrix_01 {
	
	/* Approach 1 : BFS
	 * Time Complexity : O(V+E), where E is number of Edges
	 * Space Complexity : O(V), where V is number of Vertices
	 */
	public int[][] updateMatrix(int[][] matrix) {
        int m = matrix.length;
        if(m == 0){
            return matrix;
        }
        int n = matrix[0].length;
        Queue<int[]> q = new LinkedList<>();
        int res[][] = new int[m][n];
        int [] xList = {-1,0,1,0};
        int [] yList = {0,1,0,-1};
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(matrix[i][j] == 1){
                    q.offer(new int[]{i,j});
                    int count = 0;
                    while(!q.isEmpty()){
                        boolean flag = false;
                        int len = q.size();
                        count++;
                        for(int k=0; k<len; k++){
                            int[] temp = q.poll();
                            for(int l=0; l<4; l++){
                                int newX = temp[0] + xList[l];
                                int newY = temp[1] + yList[l];
                                if(isSafe(newX, newY, m, n)){
                                    if(matrix[newX][newY] == 1){
                                        q.offer(new int[]{newX, newY});
                                    }else if(matrix[newX][newY] == 0){
                                        res[i][j] = count;
                                        flag = true;
                                        break;
                                    }  
                                }
                            }
                            if(flag == true){
                                q.clear();
                                break;
                            }
                        }
                    }
                }
            }
        }
        return res;
    }
    private boolean isSafe(int nextX, int nextY, int m, int n) {
		if(nextX >= 0 && nextX < m && nextY >= 0 && nextY < n){
			return true;
		}
		return false;
	}
}
