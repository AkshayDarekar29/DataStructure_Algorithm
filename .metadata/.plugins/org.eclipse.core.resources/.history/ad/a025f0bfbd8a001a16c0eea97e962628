package binarySearch.BinarySearchInBitonicArray;

public class BinarySearchInBitonicArray {
	public static void main(String[] args) {
		BinarySearchInBitonicArray obj = new BinarySearchInBitonicArray();
		int arr [] = {3,4,7,8,6,2,1};
		int target = 12;
		int x = obj.search(arr, target);
		System.out.println(x);
	}
	
	public int search(int[] nums, int target) {
        int start = 0;
        int end = nums.length-1;
        int pivot;
        if(nums.length == 0){
            return -1;
        }else if(nums[start] < nums[end]){
			pivot = -1;
		}else{
            pivot = findPivot(nums, start, end);
        }
        System.out.println("Pivot is "+ pivot);
        int position;
		if(pivot == -1){
			position = binarySearch(nums, 0, nums.length-1,target);
		}else if(target >= nums[0] && target <= nums[pivot] ){
			position = binarySearch(nums, 0, pivot, target);
		}else{
			position = binarySearch(nums, pivot+1, nums.length-1, target);
		}
        return position;
    }
    
    private int findPivot(int[] arr, int start, int end) {
		int mid = (start+end)/2;
		if(mid == 0 && mid == arr.length-1){
			return -1;
		}
		if(arr[mid-1] > arr[mid] && arr[mid] > arr[mid+1]){
			return mid;
		}		
		else if(arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1]){
            return findPivot(arr, mid+1, end);
        }else if(arr[mid] < arr[mid-1] && arr[mid] > arr[mid+1]){
            return findPivot(arr, start, mid-1);
        }else{
        	return -1;
        }
	}
    public int binarySearch(int [] arr, int beg, int end, int item){
        int mid;
		if(end >= beg){
			mid = (beg + end)/2;
			if(item == arr[mid]){
				return mid;
			}else if(item > arr[mid]){
				return binarySearch(arr, mid+1, end, item);
			}else {
				return binarySearch(arr, beg , mid-1, item);
			}
		}	
		return -1;
    }

	
}
