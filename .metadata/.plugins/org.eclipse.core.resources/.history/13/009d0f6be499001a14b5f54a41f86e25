package dynamicProgramming.CuttingARod;

public class CuttingARod {
	public static void main(String[] args) {
		CuttingARod obj = new CuttingARod();
		int len = 8;
		int[] price = {2,4,8,9,10,17,17,20};
		dp = new int[len+1];
		obj.maxCost(len,price,0);
		System.out.println(maxCost);
	}

	/*Approach 1 : Brute-Force
	 * Time Complexity: 
	 * Space Complexity: 
	*/
	static int  maxCost = 0;
	public void maxCost(int len, int[] price, int cost) {
		if(cost > maxCost){
			maxCost = cost;
		}
		for (int i = 0; i < len; i++) {
			maxCost(len-(i+1), price, cost+price[i]);
		}
	}
	static int[] dp;
	public int maxCost2(int len, int[] price, int cost) {
		if(dp[len] == 0){
			if(cost > maxCost){
				maxCost = cost;
			}
			for (int i = 0; i < len; i++) {
				dp[len] = maxCost2(len-(i+1), price, cost+price[i]);
			}
		}
		return dp[len];
	}

}
