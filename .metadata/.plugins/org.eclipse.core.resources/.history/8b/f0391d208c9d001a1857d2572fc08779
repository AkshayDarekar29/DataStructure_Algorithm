package dynamicProgramming.PrintItemsIn_0_1_Knapsack;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class PrintItemsIn_0_1_Knapsack {
	public static void main(String[] args) {
		PrintItemsIn_0_1_Knapsack obj = new PrintItemsIn_0_1_Knapsack();
		int w [] = {20, 10, 40, 30};
		int v [] = {40, 100, 50, 60};
		int capacity = 60;
		List<Integer> list = obj.knapsack(w, v, capacity);
		System.out.println(result);
		for(int a : list){
			System.out.print(a + " ");
		}
	}
	
	/*Approach 1 : Bottom-Up
	 * Time Complexity: w.length*capacity
	 * Space Complexity: w.length*capacity
	*/
	static int result;
	public List<Integer> knapsack(int w[], int v[], int capacity){
		int dp[][] = new int [w.length][capacity+1];
		for(int i = 0; i <= capacity; i++){
			if(i - w[0] >= 0){
				dp[0][i] = v[0];
			}
		}
		for(int i = 1; i < w.length; i++){
			for(int j = 1; j <= capacity; j++){
					if(j-w[i] >= 0){
						dp[i][j] = Math.max(dp[i-1][j], v[i] + dp[i-1][j-w[i]]);
					}else{
						dp[i][j] = dp[i-1][j];
					}
			}
		}
		for(int[] x : dp){
			System.out.println(Arrays.toString(x));
		}
		result = dp[w.length-1][capacity];
		List<Integer> list = new ArrayList<>();
		int j = capacity;
		for(int i = w.length-1; i >= 0; i--){
			if(i == 0){
				list.add(w[i]);
			}else if(dp[i][j] != dp[i-1][j]){
				list.add(w[i]);
				j = j - w[i];
			}
		}
		return list;
	}
}
